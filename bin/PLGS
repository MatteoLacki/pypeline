import argparse
from pprint import pprint
from docstr2argparse import parse_arguments
import json
from pathlib import Path

from vodkas import apex3d, peptide3d, iadbs, plgs, fastas
from vodkas.misc import write_log

parser = argparse.ArgumentParser(description='Analyze Waters Raw Data with PLGS.')
parse = lambda x: dict(parse_arguments(x))
_plgs = parse(plgs)
_fastas = parse(fastas)
_apex3d = parse(apex3d)
_peptide3d = parse(peptide3d)
_iadbs = parse(iadbs)
_write_log = parse(write_log)
_a = {**_fastas,**_apex3d,**_peptide3d,
      **_iadbs,**_write_log}
del _a['input_file'], _a['output_dir'], _a['to_log']
del _a['fasta_file'], _a['parameters_file'], _a['--PLGS']
del _a['--log_prefix']
_a.update(_plgs)
for name, kwds in sorted(_a.items()):
    parser.add_argument(name, **kwds)
args = parser.parse_args().__dict__

xml_params = {}
try:
    xml_params, T = plgs(**args)
    args['error'] = ''
except Exception as e:
    args['error'] = repr(e)
    print(e)

for algo, d in xml_params.items():
    for k,v in d.items():
        args["{}:{}".format(algo, k)] = v
write_log(args, 'plgs_', **args)

print("PLGS finished.")