import argparse
from docstr2argparse import parse_arguments
import logging
from pathlib import Path

from vodkas import apex3d, peptide3d, iadbs, plgs, get_fastas
from vodkas.fs import copy_folder


# if __name__ == '__main__':
parser = argparse.ArgumentParser(description='Analyze Waters Raw Data with PLGS.')
parse = lambda x: dict(parse_arguments(x))
_plgs = parse(plgs)
_fastas = parse(get_fastas)
_apex3d = parse(apex3d)
_peptide3d = parse(peptide3d)
_iadbs = parse(iadbs)
_a = {**_fastas,**_apex3d,**_peptide3d,**_iadbs}
del _a['input_file'], _a['output_dir']
del _a['fasta_file'], _a['--PLGS']

_a.update(_plgs)
_a["--no_log"] = dict(
    dest="make_log",
    action='store_false',
    help="Do not log.")

default_log = 'C:/SYMPHONY_VODKAS/temp_logs/plgs.log'
_a["--log_folder"] = dict(default=default_log,
    help=f"Local folder for logs [default = {default_log}].")
default_server = 'X:/SYMPHONY_VODKAS/temp_logs'
_a["--log_server_folder"] = dict(
    default=default_server,
    help=f"Network folder for logs [default = {default_server}].")

for name, kwds in sorted(_a.items()):
    parser.add_argument(name, **kwds)
args = parser.parse_args().__dict__

if args.make_log:
    logging.basicConfig(filename=args.logs_folder,
                        format='PLGS %(asctime)s:%(name)s:%(levelname)s:%(message)s:',
                        level=logging.INFO)

xml_params = {}
no_error = True

def get_paths(raw_folder, out_folder, network_out_folder):
    """Get proper names for the folders.

    Checks, if the folder already exists somewhere.
    Maybe it's stupid. Maybe it should check if it existed before?
    """
    raw = Path(raw_folder)
    out = Path(out_folder)
    net_out = Path(network_out_folder)
    proj_tag = raw.name[:5]
    if proj_tag[0] in ('O','I'):
        used = {p.name for x in (out, net_out)
                        for p in x.glob(proj_tag+'*')}
        if used:
            used_No = {int(t.split('_')[1]) for t in used if "_" in t}
            if (out/proj_tag).exists() or (net_out/proj_tag).exists():
                used_No.add(0)
            proj_tag = "{}_{}".format(proj_tag, max(used_No) + 1)
        out /= proj_tag
        if net_out:
            net_out /= proj_tag
    return raw, out, net_out


try:
    xml_params, T = plgs(**args)
    args['error'] = ''
except Exception as e:
    args['error'] = repr(e)
    no_error = False
    print(e)

for algo, d in xml_params.items():
    for k,v in d.items():
        args["{}:{}".format(algo, k)] = v
# write_log(args, 'plgs_', **args)

# network_out_folder="J:/test_RES",
# network_out_folder (str): Path to where to place the output on the server.
if net_out:
    copy_folder(out, net_out)
    for f in out.glob('*'):
        f.unlink() # cleaning temp after use
    out.rmdir()
