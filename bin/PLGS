import argparse
from docstr2argparse import parse_arguments
import logging
from pathlib import Path

from vodkas import apex3d, peptide3d, iadbs, plgs
from vodkas.fastas import get_fastas
from vodkas.fs import copy_folder, find_free_path, rm_tree
from vodkas.header_txt import parse_header_txt


DEBUG = True


if __name__ == '__main__':
    P = lambda x: dict(parse_arguments(x))
    A = {**P(get_fastas), **P(apex3d), **P(peptide3d), **P(iadbs)}
    A.update(P(plgs))

    del A['input_file'], A['output_dir'], A['out_folder']
    del A['fasta_file'], A['--PLGS'], A['raw_folder']

    default_out = 'C:/SYMPHONY_VODKAS/temp'
    default_log = 'C:/SYMPHONY_VODKAS/temp_logs/plgs.log'
    default_server = 'X:/SYMPHONY_VODKAS/temp_logs'
    default_net_db = 'J:/test_RES' if DEBUG else 'Y:/RES'

    A['raw_folders'] = {
        'type': Path,
        'help': 'Path(s) to the raw_folder(s) to be analysed.',
        'nargs': "+"}

    A["--out_folder"] = {
        'type': Path,
        'default': default_out,
        'help': f"Local folder to save data to (there we will place the results) [default = {default_out}]."}

    A["--logs_folder"] = {
        'type': Path,
        'default': default_log,
        'help': f"Local folder for logs [default = {default_log}]."}

    A["--log_server_folder"] = {
        'type': Path,
        'default': default_server,
        'help': f"Network folder for logs [default = {default_server}]."}

    A["--network_db_folder"] = {
        'type': Path,
        'default': default_net_db,
        'help': f"Network folder for results. Set to '' (empty word) if you want to skip copying [default = {default_net_db}]."}

    parser = argparse.ArgumentParser(description='Analyze Waters Raw Data with PLGS.')

    for name, kwds in sorted(A.items()):
        parser.add_argument(name, **kwds)
    args = parser.parse_args().__dict__

    log_file = args['logs_folder']
    log_format = '%(asctime)s:%(name)s:%(levelname)s:%(message)s:'
    logging.basicConfig(filename=log_file, format=log_format, level=logging.INFO)
    logger = get_logger('PLGS', log_format)
    del args['logs_folder']

    out = args['out_folder']
    del args['out_folder']

    for raw_folder in args['raw_folders']:
        logger.info(f"Starting analysis of '{raw_folder}'.")
        try:
            if not raw_folder.is_dir():
                logger.info(f"Raw folder missing: {raw_folder}")
                raise FileNotFoundError(f"Did not find {raw_folder}")

            acquired_name = raw_folder.stem
            header_txt = parse_header_txt(raw_folder/'_HEADER.TXT')
            sample_set = header_txt['Sample Description'][:8]
            out_folder = out/sample_set/acquired_name

            plgs_ok = plgs(raw_folder, out_folder, **args)

            if plgs_ok and args['network_db_folder']:
                net_folder = find_free_path(args['network_db_folder']/sample_set/acquired_name)
                copy_folder(out_folder, net_folder)
                rm_tree(out_folder)
                if not out_folder.parent.glob('*'):
                    out_folder.parent.rmdir()
                logger.info("Moved results to the server.")

            logger.info(f"Finished with '{raw_folder}'.")
        except FileNotFoundError as e:
            logger.warning(repr(e))
        except Exception as e:
            logger.warning(repr(e))

    logger.info("PLGS finished.")

